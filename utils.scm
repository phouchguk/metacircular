(define (append a b)
  (define (loop a b)
    (if (null? (cdr a))
        (set-cdr! a b)
        (loop (cdr a) b)))
  (if (null? a)
      b
      (begin (loop a b)
             a)))

(define (assq key alist)
  (if (null? alist)
      false
      (if (eq? (caar alist) key)
          (car alist)
          (assq key (cdr alist)))))

(define (assoc key alist)
  (if (null? alist)
      false
      (if (equal? (caar alist) key)
          (car alist)
          (assoc key (cdr alist)))))

(define (caar exp) (car (car exp)))
(define (cadr exp) (car (cdr exp)))
(define (cdar exp) (cdr (car exp)))
(define (cddr exp) (cdr (cdr exp)))
(define (caaar exp) (car (car (car exp))))
(define (caadr exp) (car (car (cdr exp))))
(define (cadar exp) (car (cdr (car exp))))
(define (caddr exp) (car (cdr (cdr exp))))
(define (cdaar exp) (cdr (car (car exp))))
(define (cdadr exp) (cdr (car (cdr exp))))
(define (cddar exp) (cdr (cdr (car exp))))
(define (cdddr exp) (cdr (cdr (cdr exp))))
(define (caaaar exp) (car (car (car (car exp)))))
(define (caaadr exp) (car (car (car (cdr exp)))))
(define (caadar exp) (car (car (cdr (car exp)))))
(define (caaddr exp) (car (car (cdr (cdr exp)))))
(define (cadaar exp) (car (cdr (car (car exp)))))
(define (cadadr exp) (car (cdr (car (cdr exp)))))
(define (caddar exp) (car (cdr (cdr (car exp)))))
(define (cadddr exp) (car (cdr (cdr (cdr exp)))))
(define (cdaaar exp) (cdr (car (car (car exp)))))
(define (cdaadr exp) (cdr (car (car (cdr exp)))))
(define (cdadar exp) (cdr (car (cdr (car exp)))))
(define (cdaddr exp) (cdr (car (cdr (cdr exp)))))
(define (cddaar exp) (cdr (cdr (car (car exp)))))
(define (cddadr exp) (cdr (cdr (car (cdr exp)))))
(define (cdddar exp) (cdr (cdr (cdr (car exp)))))
(define (cddddr exp) (cdr (cdr (cdr (cdr exp)))))

(define (for-each proc exps)
  (if (null? exps)
      '()
      (begin
        (proc (car exps))
        (for-each proc (cdr exps)))))
